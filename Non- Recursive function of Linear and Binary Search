//Non-Recursive Linear Search
#include <iostream>
using namespace std;

int linearSearch(int arr[], int size, int target) {
    for (int i = 0; i < size; i++) {
        if (arr[i] == target) {
            return i;
        }
    }
    return -1;
}

int main() {
    int arr[] = {5, 3, 8, 4, 2, 9, 1};
    int size = sizeof(arr) / sizeof(arr[0]);
    int target;
    cout << "Enter the value to search for: ";
    cin >> target;
    int result = linearSearch(arr, size, target);

    if (result != -1) {
        cout << "Element " << target << " found at index " << result << endl;
    } else {
        cout << "Element " << target << " not found in the array." << endl;
    }

    return 0;
}

//Non-Recursive Binary Search

#include <iostream>
using namespace std;

int binarySearch(int arr[], int size, int target) {
    int left = 0, right = size - 1;

    while (left <= right) {
        int mid = left + (right - left) / 2;  // Calculate mid point

        if (arr[mid] == target) {
            return mid;  // Target found, return index
        }

        else if (arr[mid] > target) {
            right = mid - 1;
        }
        else {
            left = mid + 1;
        }
    }

    return -1;
}

int main() {
    int arr[] = {1, 2, 4, 5, 8, 9, 12, 15, 20, 25};
    int size = sizeof(arr) / sizeof(arr[0]);  // Determine the size of the array
    int target;

    cout << "Enter the value to search for: ";
    cin >> target;

    int result = binarySearch(arr, size, target);

    if (result != -1) {
        cout << "Element " << target << " found at index " << result << endl;
    } else {
        cout << "Element " << target << " not found in the array." << endl;
    }

    return 0;
}
